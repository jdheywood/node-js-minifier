{"version":3,"sources":["minifier.js"],"names":[],"mappings":"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","file":"minifier.js","sourcesContent":["var fs = require('fs');\r\n\r\n// Globals, find a better way todo this asap!\r\nGlobals.myInput = '';\r\nGlobals.myCharA = '';\r\nGlobals.myCharB = '';\r\nGlobals.myCharC = '';\r\nGlobals.myCharD = '';\r\nGlobals.myLast = '';\r\nGlobals.myLastNws = '';\r\nGlobals.myLastReadChar = '';\r\nGlobals.myOutput = '';\r\nGlobals.myPosition = 0;\r\n\r\nfunction readFile(filename) {\r\n\tvar file = fs.readFileSync(filename, \"utf8\");\r\n\treturn file;\r\n}\r\n\r\nfunction isAlphanumeric(input) {\r\n\tvar expr = /^([0-9]|[a-z])+([0-9a-z]+)$/i\r\n\treturn expr.test(input);\r\n}\r\n\r\nfunction isEndspace(input) {\r\n\treturn (input == '\\n' || input == '\\r' || input == '\\f')\r\n}\r\n\r\nfunction isWhitespace(input) {\r\n\tvar expr = /\\s/\r\n\treturn expr.test(input);\r\n}\r\n\r\n/* New line characters before or after these characters can be removed.\r\n   Not + - / in this list because they require special care. */\r\nfunction isInfix(input) {\r\n\tvar expr = /[,;:=&%*<>\\?\\|\\n]/;\r\n\treturn expr.test(input);\r\n}\r\n\r\n// New line characters after these characters can be removed.\r\nfunction isPrefix(input) {\r\n\tvar expr = /[\\{\\(\\[!]/; \r\n\treturn (expr.test(input) || isInfix(input));\r\n}\r\n\r\n// New line characters before these characters can removed.\r\nfunction isPostfix(input) {\r\n\tvar expr = /[\\}\\)\\]]/; \r\n\treturn (expr.test(input) || isInfix(input));\r\n}\r\n\r\nfunction getChar() {\r\n\tif (myPosition < myInput.length) {\r\n\t\tmyLastReadChar = myInput.charAt(myPosition++);\r\n\t\treturn myLastReadChar;\r\n\t}\r\n\telse {\r\n\t\treturn undefined;\r\n\t}\r\n}\r\n\r\nfunction putChar(char) {\r\n\tmyOutput = myOutput.concat(char);\r\n}\r\n\r\n// print a\r\n// move b to a\r\n// move c to b\r\n// move d to c\r\n// new d\r\n//\r\n// i.e. print a and advance\r\nfunction action1() {\r\n  if (!isWhitespace(myCharA)) {\r\n    myLastNws = myCharA;\r\n  }\r\n  myLast = myCharA;\r\n  action2();\r\n}\r\n\r\n// sneeky output a for comments\r\nfunction action2() {\r\n  putChar(myCharA);\r\n  action3();\r\n}\r\n\r\n// move b to a\r\n// move c to b\r\n// move d to c\r\n// new d\r\n//\r\n// i.e. delete a\r\nfunction action3() {\r\n  myCharA = myCharB;\r\n  action4();\r\n}\r\n\r\n// move c to b\r\n// move d to c\r\n// new d\r\n//\r\n// i.e. delete b\r\nfunction action4() {\r\n  myCharB = myCharC;\r\n  myCharC = myCharD;\r\n  myCharD = getChar();\r\n}\r\n\r\nfunction defined(thing) {\r\n\treturn (typeof thing !== 'undefined');\r\n}\r\n\r\n// put string and regexp literals\r\n// when this sub is called, myCharA is on the opening delimiter character\r\nfunction putLiteral() {\r\n\tvar delimiter = myCharA; // ', \" or /\r\n\taction1();\r\n\tdo {\r\n\t\twhile (defined(myCharA) && myCharA == '\\\\') {\r\n\t\t\taction1();\r\n\t\t\taction1();\r\n\t\t}\r\n\t\taction1();\r\n\t} while (myLast !== delimiter);\r\n\tif (myLast !== delimiter) {\r\n\t\tthrow 'unterminated ' + (delimiter == '\\'' ? 'single quoted string' : delimiter == '\"' ? 'double quoted string' : 'regular expression') + ' literal, stopped';\r\n\t}\r\n}\r\n\r\n// If a is a whitespace then collapse all following whitespace.\r\n// If any of the whitespace is a new line then ensure a is a new line\r\n// when this function ends.\r\nfunction collapseWhitespace() {\r\n\twhile (defined(myCharA) && isWhitespace(myCharA) && \r\n\t\t   defined(myCharB) && isWhitespace(myCharB)) {\r\n\t\tif (isEndspace(myCharA) || isEndspace(myCharB)) {\r\n\t\t\tmyCharA = '\\n';\r\n\t\t}\r\n\t\taction4(); // delete b\r\n\t}\r\n}\r\n\r\n// Advance a to non-whitespace or end of file.\r\n// Doesn't print any of this whitespace.\r\nfunction skipWhitespace() {\r\n  while (defined(myCharA) && isWhitespace(myCharA)) {\r\n    action3();\r\n  }\r\n}\r\n\r\n// Advance a to non-whitespace or end of file\r\n// If any of the whitespace is a new line then print one new line.\r\nfunction preserveEndspace() {\r\n  collapseWhitespace();\r\n  if (defined(myCharA) && isEndspace(myCharA) && defined(myCharB) && !isPostfix(myCharB) ) {\r\n    action1();\r\n  }\r\n  skipWhitespace();\r\n}\r\n\r\nfunction onWhitespaceConditionalComment() {\r\n  return (defined(myCharA) && isWhitespace(myCharA) &&\r\n          defined(myCharB) && myCharB == '/' &&\r\n          defined(myCharC) && (myCharC == '/' || myCharC == '*') &&\r\n          defined(myCharD) && myCharD == '@');\r\n}\r\n\r\n// ------------------------------------------------------------------------------------------\r\n\r\nfunction minify(filename, stripDebug) {\r\n\t// read the file\r\n\tmyInput = readFile(filename);\r\n\r\n\t// set up the buffer\r\n\tmyCharA = getChar();\r\n\twhile (defined(myCharA) && isWhitespace(myCharA)) {\r\n\t\tmyCharA = getChar();\r\n\t}\r\n\tmyCharB = getChar();\r\n\tmyCharC = getChar();\r\n\tmyCharD = getChar();\r\n\tmyLast = undefined;\r\n\tmyLastNws = undefined;\r\n\r\n\tvar ccFlag = false;\r\n\r\n\twhile (defined(myCharA)) {\r\n\r\n\t\tif (isWhitespace(myCharA)) {\r\n\t\t\tthrow 'minifier bug: minify loop starting with whitespace, barfed!';\r\n\t\t}\r\n\r\n\t\t// Each branch handles trailing whitespace and ensures a is on non-whitespace or is undefined when branch finishes\r\n\t\tif (myCharA == '/') { // a division, comment, or regexp literal\r\n\t      \tif (defined(myCharB) && myCharB == '/') { // slash-slash comment\r\n\t        \tccFlag = defined(myCharC) && myCharC == '@'; // tests in IE7 show no space allowed between slashes and at symbol\r\n\t        \twhile (defined(myCharA) && !isEndspace(myCharA)) {\r\n\t        \t\tccFlag ? action2() : action3();\r\n\t        \t}\r\n\t        \tif (defined(myCharA)) { // a is a new line\r\n\t          \t\tif (ccFlag) {\r\n\t            \t\taction1(); // cannot use preserveEndspace() here because it might not print the new line\r\n\t            \t\tskipWhitespace();\r\n\t          \t\t}\r\n\t          \t\telse if (defined(myLast) && !isEndspace(myLast) && !isPrefix(myLast)) {\r\n\t            \t\tpreserveEndspace();\r\n\t          \t\t}\r\n\t          \t\telse {\r\n\t            \t\tskipWhitespace();\r\n\t          \t\t}\r\n\t        \t}\r\n\t      \t}\r\n\t\t\telse if (defined(myCharB) && myCharB == '*') { // slash-star comment\r\n\t    \t\tccFlag = (defined(myCharC) && myCharC == '@'); // test in IE7 shows no space allowed between star and at symbol\r\n\t    \t\twhile (defined(myCharB) && !(myCharA == '*' && myCharB == '/')) {\r\n\t      \t\t\tccFlag ? action2() : action3();\r\n\t    \t\t}\r\n\t    \t\tif (defined(myCharB)) { // a is asterisk and b is foreslash\r\n\t      \t\t\tif (ccFlag) {\r\n\t        \t\t\taction2(); // the *\r\n\t        \t\t\taction2(); // the /\r\n\t        \t\t\t// inside the conditional comment there may be a missing terminal semi-colon\r\n\t        \t\t\tpreserveEndspace();\r\n\t      \t\t\t}\r\n\t      \t\t\telse { // the comment is being removed\r\n\t        \t\t\taction3(); // the *\r\n\t        \t\t\taction3();\r\n\t        \t\t\tmyCharA = ' ';  // the /\r\n\t        \t\t\tcollapseWhitespace();\r\n\t        \t\t\tif (defined(myLast) && defined(myCharB) &&\r\n\t            \t\t\t((isAlphanumeric(myLast) && (isAlphanumeric(myCharB) || myCharB == '.')) ||\r\n\t             \t\t\t(myLast == '+' && myCharB == '+') || (myLast == '-' && myCharB == '-'))) { // for a situation like 5-/**/-2 or a/**/a\r\n\t          \t\t\t\t// When entering this block a is whitespace.\r\n\t          \t\t\t\t// The comment represented whitespace that cannot be removed. Therefore replace the now gone comment with a whitespace.\r\n\t          \t\t\t\taction1();\r\n\t        \t\t\t}\r\n\t        \t\t\telse if (defined(myLast) && !isPrefix(myLast)) {\r\n\t          \t\t\t\tpreserveEndspace();\r\n\t        \t\t\t}\r\n\t        \t\t\telse {\r\n\t          \t\t\t\tskipWhitespace();\r\n\t        \t\t\t}\r\n\t      \t\t\t}\r\n\t    \t\t}\r\n\t    \t\telse {\r\n\t      \t\t\tthrow 'unterminated comment, stopped';\r\n\t    \t\t}\r\n\t  \t\t}\r\n\t  \r\n\t  \t\telse if ( defined(myLastNws) && (myLastNws == ')' || myLastNws == ']' || myLastNws == '.' || isAlphanumeric(myLastNws)) ) { // division\r\n\t    \t\taction1();\r\n\t    \t\tcollapseWhitespace();\r\n\t    \t\t// don't want a division to become a slash-slash comment with following conditional comment\r\n\t    \t\tonWhitespaceConditionalComment() ? action1() : preserveEndspace();\r\n\t  \t\t}\r\n\t  \t\telse { // regexp literal\r\n\t    \t\tputLiteral();\r\n\t    \t\tcollapseWhitespace();\r\n\t    \t\t// don't want closing delimiter to become a slash-slash comment with following conditional comment\r\n\t    \t\tonWhitespaceConditionalComment() ? action1() : preserveEndspace();\r\n\t  \t\t}\r\n\t\t}\r\n\t\telse if (myCharA == '\\'' || myCharA == '\"' ) { // string literal\r\n\t  \t\tputLiteral();\r\n\t  \t\tpreserveEndspace();\r\n\t\t}\r\n\t\telse if (myCharA == '+' || myCharA == '-') { // careful with + + and - -\r\n\t  \t\taction1();\r\n\t  \t\tcollapseWhitespace();\r\n\t  \t\tif (defined(myCharA) && isWhitespace(myCharA)) {\r\n\t    \t\t(defined(myCharB) && myCharB == myLast) ? action1() : preserveEndspace();\r\n\t  \t\t}\r\n\t\t}\r\n\t\telse if (isAlphanumeric(myCharA)) { // keyword, identifiers, numbers\r\n\t  \t\taction1();\r\n\t  \t\tcollapseWhitespace();\r\n\t  \t\tif (defined(myCharA) && isWhitespace(myCharA)) {\r\n\t    \t\t// if b is '.' could be (12 .toString()) which is property invocation. If space removed becomes decimal point and error.\r\n\t    \t\t(defined(myCharB) && (isAlphanumeric(myCharB) || myCharB == '.')) ? action1() : preserveEndspace();\r\n\t  \t\t}\r\n\t\t}\r\n\t\telse if (myCharA == ']' || myCharA == '}' || myCharA == ')') { // no need to be followed by space but maybe needs following new line\r\n\t  \t\taction1();\r\n\t  \t\tpreserveEndspace();\r\n\t\t}\r\n\t\telse if (stripDebug && myCharA == ';' &&\r\n\t       \t\tdefined(myCharB) && myCharB == ';' &&\r\n\t       \t\tdefined(myCharC) && myCharC == ';') {\r\n\t  \t\taction3(); // delete one of the semi-colons\r\n\t  \t\tmyCharA = '/'; // replace the other two semi-colons\r\n\t  \t\tmyCharB = '/'; // so the remainder of line is removed\r\n\t\t}\r\n\t\telse { // anything else just prints and trailing whitespace discarded\r\n\t  \t\taction1();\r\n\t  \t\tskipWhitespace();\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\tif (defined(myLastReadChar) && myLastReadChar == '\\n') {\r\n    \tputChar('\\n');\r\n  \t}\r\n\r\n  \treturn myOutput;\r\n} // fin\r\n\r\nexports.readFile = readFile;\r\nexports.isAlphanumeric = isAlphanumeric;\r\nexports.isEndspace = isEndspace;\r\nexports.isWhitespace = isWhitespace;\r\nexports.isInfix = isInfix;\r\nexports.isPrefix = isPrefix;\r\nexports.isPostfix = isPostfix;\r\nexports.getChar = getChar;\r\nexports.putChar = putChar;\r\nexports.defined = defined;\r\nexports.minify = minify;\r\n"]}