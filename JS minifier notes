JS minifier notes

Perhaps need to update my version of node to take advantage of ES6 classes?

Create a class (use ES6 feature of javascript)

JsFile(
	input, string
	length, int
	currentPosition, int
	lastPosition, int
	char1, char
	char2, char
	char3, char
	char4, char
	output, string
	result, string

	read(), function
	skip(numberOfChars int), function
	write(), function

	minify(), function
)

properties:

input is the string of the js file coming in
length is the number of characters in the input js
currentPosition is the current position in the input js string
lastPosition is the position in the input js string we were at before attempting the current step in the minification, for back-tracking purposes should this be required
char1 is the character at the current position
char2 is the character at the current position + 1
char3 is the character at the current position + 2
char4 is the character at the current position + 3
output is the minified version of the input js
result is a string message detailing what happened, either 'success!' or 'fail: <reason>'

methods:

read() sets the char1, char2, char3 and char4 properties based off the position property
skip(numberOfChars int) skips a number of characters and sets the position property accordingly
write() writes the char at the current position
minify() the entry point, starts at first position and writes a minified version of the input property character by character to the output property

------------------------------------------------------------------------------


So I've set myself another challenge, this time the goal is to gain a bit more experience and understanding of perl syntax, so what better way to do that than to try and translate some perl into a language I already know something about, that way I have to research perl syntax and find its counterparts in a language I already understand.

As perl is a dynamic interpreted language it seems only fair to give myself a fighting chance and use something similar, thinking about dynamic interpreted languages that I have had exposure to, of those the one I'm most familiar with is good old javascript, so let's use that.

Next we need something to translate, let's not go overboard here with complexity, although at the same time I need something a little more challenging than hello world, and if it was something of real utility it would help to make the results something useful, after a bit of digging around I found this perl module; https://github.com/zoffixznet/JavaScript-Minifier a javascript minifier written in perl. This kind of completes a nice circle in that if I'm successful I'll have a javascript minifier of javascript, which is nice!

Taking the goal of this exercise a little further, it would be nice to be to use some ofthe new shiny EC6 features of javascript too, to push this on beyond simple vanilla JS, so we'll have a go at that too.

So how best to approach the problem, after a brief review of the perl module I gave myself a little vertigo, perhaps this was too much of an ask, but that's just the fear talking, and as Paul Muad'Dib once said, fear is the mind killer, (yes I recently re-read Dune, still great 10+ years after my first trip to Arrakis) so park that shit, take a step back and break theproblem down into smaller more manageable pieces, as I see it there are four main steps to cracking this;

1. Identify and set up some means of running my javascript minifier
2. Translate the perl to vanilla javascript 
3. Test the translation as I build it 
4. Pick a reasonable piece of javascript to test this on
5. Compare my results with those of the perl modules
6. Once happy start re-writing with ES6 features


Running my Javascript

So a few steps to take care of there, starting at the beginning how do I run my as yet non-existent javascript? There are a few ways to do this, I could use an online tool like http://jsfiddle.net or one of the many similar tools a quick google throws up like http://jsbin.com or http://codepen.io/ but they don't really offer the kind of full hands on experience I ws after. On reflection I decided to write a little node application that I could submit a javascript file to, that way I could write my minifier within node and have a framework in place to manually and possibly automatically test the use of my minifier against actual javascript files.

Luckily I already had a basic node application that allows you to upload and display image files, that'll do nicely for my purposes. I wrote this ages ago following a basic node tutorial (if you've searched for a node tutorial online you have possibly stumbled over this), you can find it here; http://www.nodebeginner.org/ well the first part is online, I bought the book a while ago, its a great introduction to node so well worth it in my humble opinion.

So adapting my basic node application to upload a javascript file and minify this then save the minified file and respond with the minified script in the body seems like a nice fit for purpose. Also it gives me some time playing around with node which is enjoyable.

A brief overview of the node application is probably a good idea then, so this is a couple of features more than the most basic node server you can write, MVP and all that, it consists of the following files; 

index.js
router.js
server.js
requestHandler.js


Translating Perl to Vanilla JS

That's the first of my steps taken care of then (with a bit of code development), how do I start translating perl a language I don;t know to javascript? Well it turns out I do know some perl, or at least I know enough of similar dynamically typed and interpreted languages, such as Javascript and a little Python and Ruby. Also most high level languages share some commonality, especially with the great grandaddy C so once you know how to code you stand a good chance of learning a new programming language.

Armed with a little knowledge then let's have a read through of the perl module, using the (very) basic pseudo code below we can describe the flow of the perl minify module; 


>>> pseudo code goes here


So now we have a basic understanding of the flow how do we start translating this code? I decided to start with the various helper functions that the perl module contains, the main routine uses several helper functions to help either identify the expression that the current part of the input represents or to help chop up the input and remove stuff we don't need like comments and whitespace etc.

So let's add a new file for my minifier then, we'll call this minifier.js to keep things nice and simple, and starting with the supporting perl functions we'll add javascript functions for the following; 

readFile
isAlphanumeric
isEndspace
isWhitespace
isInfix
isPrefix
isPostfix
getChar
putChar
defined
minify

Starting at the top and working my way down gave me exposure to perl syntax, armed with my trusty Google-Fu skills I started piecing together these helper functions, but once I understand what these should do how can I ensure what I am writing is fit for purpose? 



Test the translation as I build it

We need some tests, given that I have enough new tech on my hands at the moment I decided to shy away from implementing a javascript testing framework such as jasmine, instead as I have a nice litte server I decided to add a new request handler for /test and use this to test these helper functions by setting up test cases, calling the helper functions and writing out the results to the response body, try it out and you'll see how far I got with these tests.

Given a bit more time I would like to implement jasmine BDD testing, it looks like it has a nice node integration and seems fairly straight forward to set up; http://jasmine.github.io/2.0/introduction.html 

So by reading through perl syntax online, and writing the helper functions in javascript I gained an understanding of how the minifier works, once the helper functions and a means for me to execute the minifier (via my node app) were in place the next step was to write the main function that actually does the minification.

This took me the longest, especially as it is based on a while loop. There were a few head scratching moments when I entered into an infinite loop, but I got there in the end. 



Pick a reasonable piece of javascript to test this on

As I was writing the main minifier function I realised I needed something realistic to test this on, looking through some of my previous projects the first thing that jumped out at me was jQuery, why not, its a well know and proven piece of code, let's have a crack at that then.

I downloaded the uncompressed development version of 1.11.3 from here; http://code.jquery.com/jquery-1.11.3.js 



Compare my results with those of the perl module

There's one easy way to check the veracity of the output from my translated minifier, which is obvious really, run the same javascript through the perl minifier and comapre the two outputs, so let's do that then!

To do that we'll need to set up a perl envirnoment, luckily I have one at hand as described by this post [insert link] So after finding the package on CPAN (https://metacpan.org/pod/JavaScript::Minifier) I was able to install this on my perl VM (http://www.perlmonks.org/?node_id=128077) and run my jquery javascript file through it so I can compare it to my JS minified version.

Initially there was a significant difference, which after a little debugging was due to an error I had made in transposing the boolean logic around /* comments. 

In Perl there is a nice bit of loop syntax, the do {...} until (condition) loop. There is no direct equivalent in Javascript, but we can replicate this with a while (condition) {...} loop.

The error I made was in my transposition of the boolean logic, changing 

until (!defined($s->{b}) || ($s->{a} eq '*' && $s->{b} eq '/'))

to 

while (defined(myCharB) && !(myCharA == '*' && myCharB == '/'))

Initially I had the following; 

while (defined(myCharB) && (myCharA != '*' && myCharB != '/'))

Which is not the same logic, and meant I had loads of left over comment content and end comment markers that had not been removed as they should be, so my javascript was in fact broken.

Once I resolved this I got pretty close to the perl minified version, however I still have a few tabs or whitespaces left over which the perl version has removed. I decided to park the debugging of this as the overall difference between the perl and my JS minified scripts is only 2kb. 

Given I want to look at using some of the new ES6 javascript syntax I figured my version is close enough for now for me to move on, and given enough time later I will redouble my efforts to get this last whitespace removed from my minified version.



Once happy start re-writing with ES6 features

So what features does ES6 provide that we might want to use, a quick bit of Google-Fu provides us a few likely candidates;

ES6 features



So how do we do this, well we we can easily write some of our code in this way however if we want to run it through node we'll need to transpile it down to ES5 syntax for it to execute.

This sounds like a job for some automation, let's introduce a task runner. The one I've used in the past is grunt http://gruntjs.com/, surely there's a grunt tool for transpiling ES6, let's have a look, yep of course there is, I'm rolling with babel https://babeljs.io/ you can see the package.json and Gruntfile.js I set up to run the compilation/transpilation.

So the dev process now is;
- write my ES6 flavoured JS
- run grunt
- execute the compiled/index.js with node
- enjoy!

This seems a little odd, write code in one format but execute in another, but its no different to using coffeescript or typescript, in fact its similar to writing code in a compiled language like C#, although admittedly the output of our compilation here is still code that needs interpreting rather than a binary exectable or package.

So anyway once you have transpiled navigate to the compiled version and fire it up, all being well it should behave itself and work as it did before, et voila we have a JS minifier written using some ES6 javascript, very nice indeed.




Summary

So to round off this very long winded post, here are my final thoughts;


What I Like

The fact that my JS minifier actually minifies javascript, using javascript!
The use of node as a development framework
That I've learnt a bit about perl, setting up a VM, installing modules, syntax, the $_ default variable (or topic)
Grunt and babel

What I Don't like

That it's not quite an exact match due to some small bug I've yet to track down
That online JS lint tools are super strict and a bit of a pain when just trying to validate your javascript
That use strict kills global variables, although I shouldn't have been using them anyway


What I'd do if I had more time

Implement proper testing using Jasmine http://jasmine.github.io/2.0/introduction.html
Debug the perl to see the control flow rather than just picturing this in my head
Add some defensive coding, catch thrown exceptions for example
Add some basic styling to the node app pages
Introduce more ES6 features


I've learnt quite a few things during this exercise, and it's been a fun little challenge which I've mostly achieved, as with all first passes there is plenty of room for improvement but that just gives me a reason to revisit this project and learn some more.


Ok that's all for now folks, until next time, stay classy


